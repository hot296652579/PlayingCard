{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","ReceiveGroup","PlayGroup","CloseGroup","OpenGroup","GameDB","EventMgr","ECardDir","ENumSiut","EnumSuit","EventGame_Enum","Poker","index","_pokers","pokers","addPoker","poker","parent","push","removePoker","topPoker","groupTop","length","getPoker","groupIsEmpty","i","suit","isNextPoker","count","dir","OPEN","getInstance","emit","EVENT_OPEN_TOPPOKER_UPDATE_VIEW","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","instance","constructor","cardTotal","cardSuits","_closeGroup","_openGroup","_openPokers","_receiveArea","_playArea","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","onPlayToReceive","EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB","onCloseToOpen","resetGame","createCardsDB","j","HeiTao","HongTao","MeiHua","FangKuai","CLOSE","receiveGroup","EVENT_GAME_INIT","gamePlay","shuffle","temp","forEach","p","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","rnd","dis","groupIndex","playPokerGrop","EVENT_GAME_INIT_GROUP","group","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW","EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW","onCheckInPlayArea","playArea","filter","pg","onCheckIndexTop","gp","onCheckInCloseArea","closeGroup","onCheckIndexByCloseTop","openGroup","openPokers","receiveArea"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, ENumSiut, EnumSuit, ESuitNum, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    public index: number = null\n    public _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        poker.parent = this\n        this._pokers.push(poker)\n    }\n\n    public removePoker(poker) {\n        let topPoker = this.groupTop\n        if (poker == topPoker) {\n            this._pokers.length = this._pokers.length - 1\n            poker.parent = null\n\n            return poker\n        }\n    }\n\n    public getPoker(index: number) {\n        if (!this.groupIsEmpty()) {\n            let i = index >= 0 ? index : this.pokers.length + index\n            if (i < this.pokers.length) {\n                return this.pokers[i]\n            }\n        }\n        return null\n\n    }\n\n    public groupIsEmpty() {\n        return this._pokers.length == 0\n    }\n\n    public get groupTop() {\n        return this.groupIsEmpty() ? null : this._pokers[this._pokers.length - 1]\n    }\n}\n\nclass ReceiveGroup extends PokerGrop {\n    public suit: number = null\n\n    public isNextPoker(poker: Poker) {\n        if (ENumSiut[this.suit] === poker.suit) {\n            if (this.groupTop) {\n                return this.groupTop.count + 1 == poker.count\n            } else {\n                return poker.count == 1\n            }\n        }\n\n        return false\n    }\n}\n\nclass PlayGroup extends PokerGrop {\n    public removePoker(poker: Poker) {\n        super.removePoker(poker)\n        if (!this.groupIsEmpty()) {\n            let topPoker = this.groupTop\n            topPoker.dir = ECardDir.OPEN\n\n            EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TOPPOKER_UPDATE_VIEW, topPoker)\n        }\n    }\n}\n\nclass CloseGroup extends PokerGrop { }\nclass OpenGroup extends PokerGrop {\n    public addPoker(poker: Poker): Poker {\n        super.addPoker(poker)\n        // poker.dir = ECardDir.OPEN\n        return poker\n    }\n}\n\nexport const RECEIVE_AREA_COUNT: number = 4\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区盖着的数据*/\n    private _closeGroup: CloseGroup = new CloseGroup()\n    /** 发牌区打开着的数据*/\n    private _openGroup: OpenGroup = new OpenGroup()\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: ReceiveGroup[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    constructor() {\n        this.initEvent()\n    }\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, this.onPlayToReceive, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB, this.onCloseToOpen, this)\n    }\n\n    resetGame() {\n        this._pokers = []\n        this._openPokers = []\n        this._receiveArea = []\n        this._playArea = []\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new ReceiveGroup()\n            receiveGroup.index = this._receiveArea.length\n            receiveGroup.suit = index\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PlayGroup()\n            receiveGroup.index = this._playArea.length\n            this._playArea.push(receiveGroup)\n        }\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        this.shuffle(this._pokers, 200)\n        let temp = this._pokers\n        // this._closeGroup._pokers = this.pokers\n        this.pokers.forEach(p => this._closeGroup.addPoker(p))\n        this._pokers = temp\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let playPokerGrop = this._playArea[groupIndex]\n                let poker = this._closeGroup.pokers[this._closeGroup.pokers.length - 1]\n                this._closeGroup.pokers.length = this._closeGroup.pokers.length - 1\n                playPokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n    }\n    /**改变玩牌区到收牌区数据*/\n    onPlayToReceive(poker: Poker) {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                let parent: PokerGrop = poker.parent\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW, poker)\n            }\n        }\n    }\n    /**移除close顶部牌数据添加到open区数据*/\n    onCloseToOpen(poker: Poker) {\n        let parent: CloseGroup = poker.parent\n        parent.removePoker(poker)\n        this._openGroup.addPoker(poker)\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW, poker)\n    }\n\n    //检测这张牌是否在play area\n    onCheckInPlayArea(poker: Poker): boolean {\n        return this.playArea.filter(\n            pg => pg.pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        ).length > 0\n    }\n\n    //检测是否在顶部\n    onCheckIndexTop(poker: Poker) {\n        for (const gp of this._playArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测这张牌是否在close area\n    onCheckInCloseArea(poker: Poker): boolean {\n        return this.closeGroup.pokers.filter(\n            p => p.count == poker.count && p.suit == poker.suit\n        ).length > 0\n    }\n\n    //检测是否在closeArea顶部\n    onCheckIndexByCloseTop(poker: Poker) {\n        if (this._closeGroup.pokers.length <= 0)\n            return null\n\n        for (const poker of this._closeGroup.pokers) {\n            let topPoker = this._closeGroup.pokers[this._closeGroup.pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closeGroup(): CloseGroup { return this._closeGroup }\n    public get openGroup(): CloseGroup { return this._openGroup }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PlayGroup[] { return this._playArea }\n    public get receiveArea(): ReceiveGroup[] { return this._receiveArea }\n}\n"]}
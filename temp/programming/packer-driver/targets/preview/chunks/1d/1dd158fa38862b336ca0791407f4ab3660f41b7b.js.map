{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","ReceiveGroup","PlayGroup","CloseGroup","OpenGroup","GameDB","EventMgr","ECardDir","ENumSiut","EnumSuit","EventGame_Enum","Poker","index","_pokers","pokers","addPoker","poker","parent","push","removePoker","p","length","count","suit","splice","getPoker","groupIsEmpty","i","groupTop","indexOfPoker","indexOf","isNextPoker","topPoker","dir","OPEN","getInstance","emit","EVENT_OPEN_TOPPOKER_UPDATE_VIEW","CLOSE","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","instance","constructor","cardTotal","cardSuits","_closeGroup","_openGroup","_openPokers","_receiveArea","_playArea","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","onPlayToReceive","EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB","onCloseToOpen","EVENT_OPEN_TO_UPDATE_DB","onOpenToReceive","onOpenToPlay","resetGame","createCardsDB","j","HeiTao","HongTao","MeiHua","FangKuai","receiveGroup","shuffle","EVENT_GAME_INIT","gamePlay","temp","forEach","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","rnd","dis","groupIndex","playPokerGrop","EVENT_GAME_INIT_GROUP","group","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW","openGroup","EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW","EVENT_OPEN_TO_RECEIVE_UPDATE_VIEW","EVENT_OPEN_TO_PLAY_UPDATE_VIEW","onCheckInPlayArea","playArea","filter","pg","onCheckIndexTop","gp","onCheckInCloseArea","closeGroup","onCheckIndexByCloseTop","onCheckInOpenArea","onCheckIndexByOpenTop","isCloseEmptyOpenToClose","empty","EVENT_OPEN_TO_CLOSE_UPDATE_VIEW","openPokers","receiveArea"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, ENumSiut, EnumSuit, ESuitNum, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    public index: number = null\n    public _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        poker.parent = this\n        this._pokers.push(poker)\n    }\n\n    public removePoker(p) {\n        // let topPoker = this.groupTop\n        // if (poker == topPoker) {\n        //     this._pokers.length = this._pokers.length - 1\n        //     poker.parent = null\n\n        //     return poker\n        // }\n\n        for (let index = 0; index < this._pokers.length; index++) {\n            let poker = this._pokers[index];\n            if (poker.count == p.count && poker.suit == p.suit) {\n                this._pokers.splice(index, 1)\n                // console.log('删除后的pokers', this._pokers)\n                return p\n            }\n        }\n    }\n\n    public getPoker(index: number) {\n        if (!this.groupIsEmpty()) {\n            let i = index >= 0 ? index : this.pokers.length + index\n            if (i < this.pokers.length) {\n                return this.pokers[i]\n            }\n        }\n        return null\n    }\n\n    public groupIsEmpty() {\n        return this._pokers.length == 0\n    }\n\n    public get groupTop() {\n        return this.groupIsEmpty() ? null : this._pokers[this._pokers.length - 1]\n    }\n    public indexOfPoker(poker: Poker): number {\n        return this.pokers.indexOf(poker)\n    }\n}\n\nclass ReceiveGroup extends PokerGrop {\n    public suit: number = null\n\n    public isNextPoker(poker: Poker) {\n        if (ENumSiut[this.suit] === poker.suit) {\n            if (this.groupTop) {\n                return this.groupTop.count + 1 == poker.count\n            } else {\n                return poker.count == 1\n            }\n        }\n\n        return false\n    }\n}\n\nclass PlayGroup extends PokerGrop {\n    public removePoker(poker: Poker) {\n        super.removePoker(poker)\n        if (!this.groupIsEmpty()) {\n            let topPoker = this.groupTop\n            topPoker.dir = ECardDir.OPEN\n\n            EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TOPPOKER_UPDATE_VIEW, topPoker)\n        }\n    }\n\n    public isNextPoker?(poker: Poker) {\n        if (this.groupIsEmpty()) {\n            return poker.count == 13\n        }\n\n        let topPoker = this.groupTop\n        if (topPoker.suit != poker.suit) {\n            return topPoker.count + 1 == poker.count\n        }\n\n        return false\n    }\n}\n\nclass CloseGroup extends PokerGrop {\n    public addPoker(poker: Poker): Poker {\n        super.addPoker(poker)\n        poker.dir = ECardDir.CLOSE\n        return poker\n    }\n}\nclass OpenGroup extends PokerGrop {\n    public addPoker(poker: Poker): Poker {\n        super.addPoker(poker)\n        // poker.dir = ECardDir.OPEN\n        return poker\n    }\n}\n\nexport const RECEIVE_AREA_COUNT: number = 4\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区盖着的数据*/\n    private _closeGroup: CloseGroup = new CloseGroup()\n    /** 发牌区打开着的数据*/\n    private _openGroup: OpenGroup = new OpenGroup()\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: ReceiveGroup[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    constructor() {\n        this.initEvent()\n    }\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, this.onPlayToReceive, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB, this.onCloseToOpen, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_OPEN_TO_UPDATE_DB, this.onOpenToReceive, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_OPEN_TO_UPDATE_DB, this.onOpenToPlay, this)\n    }\n\n    resetGame() {\n        this._pokers = []\n        this._openPokers = []\n        this._receiveArea = []\n        this._closeGroup._pokers = []\n        this._playArea = []\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new ReceiveGroup()\n            receiveGroup.index = this._receiveArea.length\n            receiveGroup.suit = index\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PlayGroup()\n            receiveGroup.index = this._playArea.length\n            this._playArea.push(receiveGroup)\n        }\n\n        this.shuffle(this._pokers, 500)\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        let temp = this._pokers\n        this._pokers.forEach(p => this._closeGroup.addPoker(p))\n        this._pokers = temp\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let playPokerGrop = this._playArea[groupIndex]\n                let poker = this._closeGroup.pokers[this._closeGroup.pokers.length - 1]\n                this._closeGroup.pokers.length = this._closeGroup.pokers.length - 1\n                playPokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n\n        // console.log('close剩下的牌数据', this._closeGroup.pokers)\n    }\n    /**改变玩牌区到收牌区数据*/\n    onPlayToReceive(poker: Poker) {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                let parent: PokerGrop = poker.parent\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW, poker)\n            }\n        }\n    }\n    /**移除close顶部牌数据添加到open区数据*/\n    onCloseToOpen(poker: Poker) {\n        let parent: CloseGroup = poker.parent as CloseGroup\n        parent.removePoker(poker)\n        // console.log('当前closeGroup的pokers', this.closeGroup.pokers)\n        this.openGroup.addPoker(poker)\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW, poker)\n    }\n\n    /**移除open顶部牌数据添加到receive区数据*/\n    onOpenToReceive(poker: Poker) {\n        let parent: OpenGroup = poker.parent\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                // console.log('可以承接此牌', poker)\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_RECEIVE_UPDATE_VIEW, poker)\n            }\n        }\n    }\n\n    /**移除open顶部牌数据添加到play区数据*/\n    onOpenToPlay(poker: Poker) {\n        let parent: OpenGroup = poker.parent\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: PlayGroup = this._openGroup[index]\n            if (group.isNextPoker(poker)) {\n                // console.log('可以承接此牌', poker)\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_PLAY_UPDATE_VIEW, poker)\n            }\n        }\n    }\n\n    //检测这张牌是否在play area\n    onCheckInPlayArea(poker: Poker): boolean {\n        return this.playArea.filter(\n            pg => pg.pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        ).length > 0\n    }\n\n    //检测是否在顶部\n    onCheckIndexTop(poker: Poker) {\n        for (const gp of this._playArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (!topPoker)\n                return null\n\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测这张牌是否在close area\n    onCheckInCloseArea(poker: Poker): boolean {\n        return this.closeGroup.pokers.filter(\n            p => p.count == poker.count && p.suit == poker.suit\n        ).length > 0\n    }\n\n    //检测是否在closeArea顶部\n    onCheckIndexByCloseTop(p: Poker) {\n        // console.log('当前点击的poker', p)\n        if (this._closeGroup.pokers.length <= 0)\n            return null\n        // console.log('this._closeGroup.pokers', this._closeGroup.pokers)\n        for (const poker of this._closeGroup.pokers) {\n            let topPoker = this._closeGroup.groupTop\n            if (poker.count == p.count && poker.suit == p.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测这张牌是否在open area\n    onCheckInOpenArea(poker: Poker): boolean {\n        return this.openGroup.pokers.filter(\n            p => p.count == poker.count && p.suit == poker.suit\n        ).length > 0\n    }\n\n    //检测是否在openArea顶部\n    onCheckIndexByOpenTop(poker: Poker) {\n        if (this.openGroup.pokers.length <= 0)\n            return null\n\n        for (const poker of this.openGroup.pokers) {\n            let topPoker = this.openGroup.pokers[this.openGroup.pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    /**检测close区是否是空的 是空就把open的数据过来*/\n    isCloseEmptyOpenToClose() {\n        let empty = this.closeGroup.groupIsEmpty()\n        if (empty) {\n            while (!this.openGroup.groupIsEmpty()) {\n                for (const poker of this.openGroup.pokers) {\n                    this.openGroup.removePoker(poker)\n                    this.closeGroup.addPoker(poker)\n                }\n            }\n\n            EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_CLOSE_UPDATE_VIEW, this.closeGroup.pokers)\n        }\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closeGroup(): CloseGroup { return this._closeGroup }\n    public get openGroup(): CloseGroup { return this._openGroup }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PlayGroup[] { return this._playArea }\n    public get receiveArea(): ReceiveGroup[] { return this._receiveArea }\n}\n"]}
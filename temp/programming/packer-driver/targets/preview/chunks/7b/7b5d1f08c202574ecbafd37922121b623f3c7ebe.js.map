{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/UI/UIPoker.ts"],"names":["_decorator","Component","Node","Sprite","ECardDir","ResMgr","getSpPath","ccclass","property","UIPoker","cardSpFrame","_poker","start","node","getComponent","init","poker","bindView","spPath","suit","count","cardSpriteFrame","getInstance","loadResSpriteFrame","spriteFrame","updateCardDir","dir","CLOSE","cardBgNode","active","refreshView"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAmBC,MAAAA,M,OAAAA,M;;AAC1CC,MAAAA,Q,iBAAAA,Q;;AAEFC,MAAAA,M;;AACEC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;yBAGjBS,O,WADZF,OAAO,CAAC,SAAD,C,UAEHC,QAAQ,CAACN,IAAD,C,2BAFb,MACaO,OADb,SAC6BR,SAD7B,CACuC;AAAA;AAAA;;AAAA;;AAAA,eAInCS,WAJmC,GAIb,IAJa;AAAA,eAK3BC,MAL2B;AAAA;;AAOnCC,QAAAA,KAAK,GAAG;AACJ,eAAKF,WAAL,GAAmB,KAAKG,IAAL,CAAUC,YAAV,CAAuBX,MAAvB,CAAnB;AACH;;AACKY,QAAAA,IAAI,CAACC,KAAD,EAAe;AAAA;;AAAA;AACrB,gBAAI,CAACA,KAAL,EAAY;AACZ,YAAA,KAAI,CAACL,MAAL,GAAcK,KAAd;AACAA,YAAAA,KAAK,CAACC,QAAN,CAAe,KAAf;AACA,gBAAMC,MAAM,GAAG;AAAA;AAAA,wCAAUF,KAAK,CAACG,IAAhB,EAAsBH,KAAK,CAACI,KAA5B,CAAf;AACA,gBAAMC,eAAe,SAAS;AAAA;AAAA,kCAAOC,WAAP,GAAqBC,kBAArB,CAAwCL,MAAxC,CAA9B;AACA,YAAA,KAAI,CAACR,WAAL,CAAiBc,WAAjB,GAA+BH,eAA/B;;AAEA,YAAA,KAAI,CAACI,aAAL,CAAmBT,KAAnB;AARqB;AASxB;;AAEDS,QAAAA,aAAa,OAAU;AAAA,cAAT;AAAEC,YAAAA;AAAF,WAAS;;AACnB,cAAIA,GAAG,IAAI;AAAA;AAAA,oCAASC,KAApB,EAA2B;AACvB,iBAAKC,UAAL,CAAgBC,MAAhB,GAAyB,IAAzB;AACH,WAFD,MAEO;AACH,iBAAKD,UAAL,CAAgBC,MAAhB,GAAyB,KAAzB;AACH;AACJ;;AAEDC,QAAAA,WAAW,GAAG;AACV,eAAKL,aAAL,CAAmB,KAAKd,MAAxB;AACH;;AA/BkC,O;;;;;iBAEhB,I","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, Sprite } from 'cc';\nimport { ECardDir } from '../Enum';\nimport Poker from '../Model/Poker';\nimport ResMgr from '../ResMgr';\nimport { getSpPath } from '../Utils/Utils';\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIPoker')\nexport class UIPoker extends Component {\n    @property(Node)\n    cardBgNode: Node = null\n\n    cardSpFrame: Sprite = null\n    private _poker: Poker\n\n    start() {\n        this.cardSpFrame = this.node.getComponent(Sprite)\n    }\n    async init(poker: Poker) {\n        if (!poker) return\n        this._poker = poker\n        poker.bindView(this)\n        const spPath = getSpPath(poker.suit, poker.count)\n        const cardSpriteFrame = await ResMgr.getInstance().loadResSpriteFrame(spPath)\n        this.cardSpFrame.spriteFrame = cardSpriteFrame\n\n        this.updateCardDir(poker)\n    }\n\n    updateCardDir({ dir }) {\n        if (dir == ECardDir.CLOSE) {\n            this.cardBgNode.active = true\n        } else {\n            this.cardBgNode.active = false\n        }\n    }\n\n    refreshView() {\n        this.updateCardDir(this._poker)\n    }\n}\n\n"]}
{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","GameDB","EventMgr","ECardDir","EnumSuit","EventGame_Enum","Poker","_pokers","pokers","addPoker","poker","push","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","cardTotal","cardSuits","_closePokers","_openPokers","_receiveArea","_playArea","getInstance","instance","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","onPlayToReceive","createCardsDB","i","j","suit","HeiTao","HongTao","MeiHua","FangKuai","CLOSE","index","receiveGroup","emit","EVENT_GAME_INIT","gamePlay","shuffle","temp","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","length","rnd","count","dis","groupIndex","pokerGrop","EVENT_GAME_INIT_GROUP","console","log","closePokers","openPokers","playArea","receiveArea"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, EnumSuit, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    private _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        this._pokers.push(poker)\n    }\n}\n\nexport const RECEIVE_AREA_COUNT: number = 4\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区数据*/\n    private _closePokers: Poker[] = []\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: PokerGrop[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, this.onPlayToReceive, this)\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._playArea.push(receiveGroup)\n        }\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        this.shuffle(this._pokers, 200)\n        let temp = this._pokers\n        this._closePokers = this.pokers\n        this._pokers = temp\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let pokerGrop = this._playArea[groupIndex]\n                let poker = this._closePokers[this._closePokers.length - 1]\n                this._closePokers.length = this._closePokers.length - 1\n                // poker.dir = i == 0 ? poker.dir = ECardDir.OPEN : poker.dir = ECardDir.CLOSE\n                pokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n    }\n\n    onPlayToReceive(poker: Poker) {\n        console.log(' 更改 db数据层....', poker)\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closePokers(): Poker[] { return this._closePokers }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PokerGrop[] { return this._playArea }\n    public get receiveArea(): PokerGrop[] { return this._receiveArea }\n}\n"]}
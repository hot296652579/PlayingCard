{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGroup","ReceiveGroup","PlayGroup","CloseGroup","OpenGroup","GameDB","EventMgr","ECardDir","ENumSiut","EnumSuit","EventGame_Enum","Poker","index","_pokers","pokers","addPoker","poker","parent","push","removePoker","p","length","count","suit","splice","getPoker","groupIsEmpty","i","popPoker","groupTop","indexOfPoker","indexOf","isNextPoker","console","log","topPoker","dir","OPEN","getInstance","emit","EVENT_OPEN_TOPPOKER_UPDATE_VIEW","CLOSE","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","instance","constructor","cardTotal","cardSuits","_closeGroup","_openGroup","_openPokers","_receiveArea","_playArea","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_PLAY_UPDATE_DB","onPlayToReceiveOrPlay","EVENT_PLAYAREA_TO_PLAY_UPDATE_DB","onPlayToPlay","EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB","onCloseToOpen","EVENT_OPEN_TO_UPDATE_DB","onOpenToReceiveOrPlay","EVENT_RECEIVE_TO_PLAY_DB","onReceiveToPlay","resetGame","createCardsDB","j","HeiTao","HongTao","MeiHua","FangKuai","receiveGroup","shuffle","EVENT_GAME_INIT","gamePlay","temp","forEach","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","rnd","dis","groupIndex","playPokerGrop","EVENT_GAME_INIT_GROUP","group","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW","EVENT_PLAYAREA_TO_PLAY_UPDATE_VIEW","indexInGroup","top","openPoker","EVENT_PLAYAREA_TO_OTHERPLAY_UPDATE_VIEW","openGroup","EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW","EVENT_OPEN_TO_RECEIVE_UPDATE_VIEW","EVENT_OPEN_TO_PLAY_UPDATE_VIEW","EVENT_RECEIVE_TO_PLAY_VIEW","onCheckInPlayArea","playArea","filter","pg","onCheckIndexTop","gp","onCheckInCloseArea","closeGroup","onCheckIndexByCloseTop","onCheckInOpenArea","onCheckInReceiveArea","onCheckIndexReceiveTop","onCheckIndexByOpenTop","isCloseEmptyOpenToClose","empty","EVENT_OPEN_TO_CLOSE_UPDATE_VIEW","openPokers"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, ENumSiut, EnumSuit, ESuitNum, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGroup {\n    public index: number = null\n    public _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        poker.parent = this\n        this._pokers.push(poker)\n    }\n\n    public removePoker(p) {\n        // let topPoker = this.groupTop\n        // if (poker == topPoker) {\n        //     this._pokers.length = this._pokers.length - 1\n        //     poker.parent = null\n\n        //     return poker\n        // }\n\n        for (let index = 0; index < this._pokers.length; index++) {\n            let poker = this._pokers[index];\n            if (poker.count == p.count && poker.suit == p.suit) {\n                this._pokers.splice(index, 1)\n                // console.log('删除后的pokers', this._pokers)\n                return p\n            }\n        }\n    }\n\n    public getPoker(index: number) {\n        if (!this.groupIsEmpty()) {\n            let i = index >= 0 ? index : this.pokers.length + index\n            if (i < this.pokers.length) {\n                return this.pokers[i]\n            }\n        }\n        return null\n    }\n\n    public popPoker() {\n        let poker = this.pokers[this.pokers.length - 1]\n        this.pokers.length = this.pokers.length - 1\n        return poker\n    }\n\n    public groupIsEmpty() {\n        return this._pokers.length == 0\n    }\n\n    public get groupTop() {\n        return this.groupIsEmpty() ? null : this._pokers[this._pokers.length - 1]\n    }\n    public indexOfPoker(poker: Poker): number {\n        return this.pokers.indexOf(poker)\n    }\n}\n\nclass ReceiveGroup extends PokerGroup {\n    public suit: number = null\n\n    public isNextPoker(poker: Poker) {\n        if (ENumSiut[this.suit] === poker.suit) {\n            // console.log('收牌组的花色', ENumSiut[this.suit])\n            // console.log('this.groupTop', this.groupTop)\n            if (this.groupTop) {\n                return this.groupTop.count + 1 == poker.count\n            } else {\n                console.log('poker.count', poker.count)\n                return poker.count == 1\n            }\n        }\n\n        return false\n    }\n}\n\nclass PlayGroup extends PokerGroup {\n    public removePoker(poker: Poker) {\n        super.removePoker(poker)\n        if (!this.groupIsEmpty()) {\n            let topPoker = this.groupTop\n            topPoker.dir = ECardDir.OPEN\n\n            EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TOPPOKER_UPDATE_VIEW, topPoker)\n        }\n    }\n\n    public isNextPoker?(poker: Poker) {\n        if (this.groupIsEmpty()) {\n            return poker.count == 13\n        }\n\n        let topPoker = this.groupTop\n        // console.log('topPoker', topPoker)\n        if (topPoker.suit != poker.suit) {\n            return topPoker.count - 1 == poker.count\n        }\n\n        return false\n    }\n}\n\nclass CloseGroup extends PokerGroup {\n    public addPoker(poker: Poker): Poker {\n        super.addPoker(poker)\n        poker.dir = ECardDir.CLOSE\n        return poker\n    }\n}\nclass OpenGroup extends PokerGroup {\n    public addPoker(poker: Poker): Poker {\n        super.addPoker(poker)\n        // poker.dir = ECardDir.OPEN\n        return poker\n    }\n}\n/**4组*/\nexport const RECEIVE_AREA_COUNT: number = 4\n/**7组*/\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区盖着的数据*/\n    private _closeGroup: CloseGroup = new CloseGroup()\n    /** 发牌区打开着的数据*/\n    private _openGroup: OpenGroup = new OpenGroup()\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: ReceiveGroup[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGroup[] = []\n\n    constructor() {\n        this.initEvent()\n    }\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_PLAY_UPDATE_DB, this.onPlayToReceiveOrPlay, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_PLAY_UPDATE_DB, this.onPlayToPlay, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_DB, this.onCloseToOpen, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_OPEN_TO_UPDATE_DB, this.onOpenToReceiveOrPlay, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_RECEIVE_TO_PLAY_DB, this.onReceiveToPlay, this)\n    }\n\n    resetGame() {\n        this._pokers = []\n        this._openPokers = []\n        this._receiveArea = []\n        this._closeGroup._pokers = []\n        this._playArea = []\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new ReceiveGroup()\n            receiveGroup.index = this._receiveArea.length\n            receiveGroup.suit = index\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PlayGroup()\n            receiveGroup.index = this._playArea.length\n            this._playArea.push(receiveGroup)\n        }\n\n        this.shuffle(this._pokers, 500)\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        let temp = this._pokers\n        this._pokers.forEach(p => this._closeGroup.addPoker(p))\n        this._pokers = temp\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let playPokerGrop = this._playArea[groupIndex]\n                let poker = this._closeGroup.pokers[this._closeGroup.pokers.length - 1]\n                this._closeGroup.pokers.length = this._closeGroup.pokers.length - 1\n                playPokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n\n        // console.log('close剩下的牌数据', this._closeGroup.pokers)\n    }\n    /**改变玩牌区到收牌区PLAY区数据*/\n    onPlayToReceiveOrPlay(poker: Poker) {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                console.log('收牌区receive可以承接此牌', poker)\n                let parent: PlayGroup = poker.parent\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW, poker)\n                return\n            }\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let group: PlayGroup = this._playArea[index]\n            if (group.isNextPoker(poker)) {\n                console.log('PLAY区play可以承接此牌', poker)\n                let parent: PlayGroup = poker.parent\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_PLAY_UPDATE_VIEW, poker)\n                break\n            }\n        }\n    }\n    /**改变玩牌区到其他玩牌区域*/\n    onPlayToPlay(poker: Poker) {\n        // console.log('poker indexInGroup:', poker.indexInGroup())\n        let indexInGroup = poker.indexInGroup()\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let group: PlayGroup = this._playArea[index]\n            if (group.isNextPoker(poker)) {\n                //连接操作\n                let parent: PlayGroup = poker.parent\n                let pokers = []\n\n                while (true) {\n                    let top = parent.popPoker()\n                    pokers.push(top)\n\n                    if (top == poker)\n                        break\n                }\n\n                for (let index = pokers.length - 1; index >= 0; index--) {\n                    let p = pokers[index];\n                    group.addPoker(p)\n                }\n\n\n                console.log('indexInGroup', indexInGroup)\n                console.log('this._playArea:', this._playArea)\n\n                let openPoker = null\n                let _pokers = this._playArea[indexInGroup]._pokers!\n                if (_pokers && _pokers.length > 0) {\n                    openPoker = this._playArea[indexInGroup].groupTop\n                }\n\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_OTHERPLAY_UPDATE_VIEW, pokers, openPoker)\n                break\n            }\n        }\n    }\n\n    /**移除close顶部牌数据添加到open区数据*/\n    onCloseToOpen(poker: Poker) {\n        let parent: CloseGroup = poker.parent as CloseGroup\n        parent.removePoker(poker)\n        // console.log('当前closeGroup的pokers', this.closeGroup.pokers)\n        this.openGroup.addPoker(poker)\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_CLOSEAREA_TO_OPEN_UPDATE_VIEW, poker)\n    }\n\n    /**移除open顶部牌数据添加到receiv或则open区数据*/\n    onOpenToReceiveOrPlay(poker: Poker) {\n        let parent: OpenGroup = poker.parent\n        //检测receive区能否承接\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                console.log('ReceiveGroup可以承接此牌', poker)\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_RECEIVE_UPDATE_VIEW, poker)\n                return\n            }\n        }\n        //检测play区能否承接\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let group: PlayGroup = this._playArea[index]\n            if (group.isNextPoker(poker)) {\n                // console.log('可以承接此牌', poker)\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_PLAY_UPDATE_VIEW, poker)\n                break\n            }\n        }\n    }\n\n    //移除receive区数据到play区\n    onReceiveToPlay(poker: Poker) {\n        let parent: ReceiveGroup = poker.parent\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let group: PlayGroup = this._playArea[index]\n            if (group.isNextPoker(poker)) {\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_RECEIVE_TO_PLAY_VIEW, poker)\n                break\n            }\n        }\n    }\n\n    //检测这张牌是否在play area\n    onCheckInPlayArea(poker: Poker): boolean {\n        return this.playArea.filter(\n            pg => pg.pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        ).length > 0\n    }\n\n    //检测是否在play顶部\n    onCheckIndexTop(poker: Poker) {\n        for (const gp of this._playArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (!topPoker)\n                continue\n\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测这张牌是否在close area\n    onCheckInCloseArea(poker: Poker): boolean {\n        return this.closeGroup.pokers.filter(\n            p => p.count == poker.count && p.suit == poker.suit\n        ).length > 0\n    }\n\n    //检测是否在closeArea顶部\n    onCheckIndexByCloseTop(p: Poker) {\n        // console.log('当前点击的poker', p)\n        if (this._closeGroup.pokers.length <= 0)\n            return null\n        // console.log('this._closeGroup.pokers', this._closeGroup.pokers)\n        for (const poker of this._closeGroup.pokers) {\n            let topPoker = this._closeGroup.groupTop\n            if (poker.count == p.count && poker.suit == p.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测这张牌是否在open area\n    onCheckInOpenArea(poker: Poker): boolean {\n        return this.openGroup.pokers.filter(\n            p => p.count == poker.count && p.suit == poker.suit\n        ).length > 0\n    }\n\n    //检测这张牌是否在receive area\n    onCheckInReceiveArea(poker: Poker): boolean {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            let pokers = group.pokers\n\n            return pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        }\n    }\n\n    //检测是否在receive顶部\n    onCheckIndexReceiveTop(poker: Poker) {\n        for (const gp of this._receiveArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (!topPoker)\n                continue\n\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    //检测是否在openArea顶部\n    onCheckIndexByOpenTop(poker: Poker) {\n        if (this.openGroup.pokers.length <= 0)\n            return null\n\n        for (const poker of this.openGroup.pokers) {\n            let topPoker = this.openGroup.pokers[this.openGroup.pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    /**检测close区是否是空的 是空就把open的数据过来*/\n    isCloseEmptyOpenToClose() {\n        let empty = this.closeGroup.groupIsEmpty()\n        if (empty) {\n            while (!this.openGroup.groupIsEmpty()) {\n                for (const poker of this.openGroup.pokers) {\n                    this.openGroup.removePoker(poker)\n                    this.closeGroup.addPoker(poker)\n                }\n            }\n\n            EventMgr.getInstance().emit(EventGame_Enum.EVENT_OPEN_TO_CLOSE_UPDATE_VIEW, this.closeGroup.pokers)\n        }\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closeGroup(): CloseGroup { return this._closeGroup }\n    public get openGroup(): OpenGroup { return this._openGroup }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PlayGroup[] { return this._playArea }\n    public get receiveGroup(): ReceiveGroup[] { return this._receiveArea }\n}\n"]}
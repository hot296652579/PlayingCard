{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","GameDB","EventMgr","ECardDir","EnumSuit","EventGame_Enum","Poker","_pokers","pokers","addPoker","poker","parent","push","removePoker","topPoker","groupTop","console","log","length","groupIsEmpty","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","getInstance","instance","constructor","cardTotal","cardSuits","_closePokers","_openPokers","_receiveArea","_playArea","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","onPlayToReceive","createCardsDB","i","j","suit","HeiTao","HongTao","MeiHua","FangKuai","CLOSE","index","receiveGroup","emit","EVENT_GAME_INIT","gamePlay","shuffle","temp","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","rnd","count","dis","groupIndex","pokerGrop","EVENT_GAME_INIT_GROUP","group","top","isConcatable","onCheckInPlayArea","playArea","filter","pg","p","onCheckIndexTop","gp","closePokers","openPokers","receiveArea"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, EnumSuit, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    private _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        poker.parent = this\n        this._pokers.push(poker)\n    }\n\n    public removePoker(poker) {\n        let topPoker = this.groupTop()\n        if (poker == topPoker) {\n            console.log('移除当前poker', poker)\n            this._pokers.length = this._pokers.length - 1\n            poker.parent = null\n\n            return poker\n        }\n    }\n\n    public groupIsEmpty() {\n        return this._pokers.length == 0\n    }\n\n    public groupTop() {\n        return this.groupIsEmpty() ? null : this._pokers[this._pokers.length - 1]\n    }\n}\n\nexport const RECEIVE_AREA_COUNT: number = 4\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区数据*/\n    private _closePokers: Poker[] = []\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: PokerGrop[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    constructor() {\n        this.initEvent()\n    }\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, this.onPlayToReceive, this)\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._playArea.push(receiveGroup)\n        }\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        this.shuffle(this._pokers, 200)\n        let temp = this._pokers\n        this._closePokers = this.pokers\n        this._pokers = temp\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let pokerGrop = this._playArea[groupIndex]\n                let poker = this._closePokers[this._closePokers.length - 1]\n                this._closePokers.length = this._closePokers.length - 1\n                // poker.dir = i == 0 ? poker.dir = ECardDir.OPEN : poker.dir = ECardDir.CLOSE\n                pokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n    }\n\n    onPlayToReceive(poker: Poker) {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group = this._receiveArea[index]\n            if (!group.groupIsEmpty()) {\n                let top: Poker = group.groupTop()\n                if (top.isConcatable(poker)) { //可以承接\n                    let parent: PokerGrop = poker.parent\n                    parent.removePoker(poker)\n                    group.addPoker(poker)\n                }\n            }\n\n        }\n    }\n\n    //检测这张牌是否在play area\n    onCheckInPlayArea(poker: Poker): boolean {\n        return this.playArea.filter(\n            pg => pg.pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        ).length > 0\n    }\n\n    //检测是否在顶部\n    onCheckIndexTop(poker: Poker) {\n        for (const gp of this._playArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closePokers(): Poker[] { return this._closePokers }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PokerGrop[] { return this._playArea }\n    public get receiveArea(): PokerGrop[] { return this._receiveArea }\n}\n"]}
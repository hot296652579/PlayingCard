{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/View/UIGameView.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","UITransform","tween","ECardDir","PLAY_AREA_COUNT","UIPoker","ccclass","property","UIGameView","onLoad","createAllCardByDB","pokers","index","poker","uiPoker","createUIPoker","initArea","addChild","node","setPosition","cardPrefab","getComponent","init","gamePlay","stuck","children","length","removeChild","push","card","closeSendArea","initPlayGroup","groupIndex","cardIndex","group","playGruopRoot","wolrdPos","convertToWorldSpaceAR","nodePos","convertToNodeSpaceAR","removeFromParent","position","setSiblingIndex","delay","nodeEndPos","dir","OPEN","to","scale","call","start"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, Game, instantiate, Vec3, UITransform, Tween, tween } from 'cc';\nimport { ECardDir } from '../Enum';\nimport GameEngine from '../GameEngine';\nimport GameDB, { PLAY_AREA_COUNT } from '../Model/GameDB';\nimport Poker from '../Model/Poker';\nimport { UIPoker } from '../UI/UIPoker';\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIGameView')\nexport class UIGameView extends Component {\n    @property(Prefab)\n    cardPrefab: Prefab = null\n\n    @property(Node)\n    closeSendArea: Node = null\n    @property(Node)\n    openSendArea: Node = null\n    @property([Node])\n    receiveAreaList: Node[] = []\n    @property(Node)\n    playGruopRoot: Node = null\n    @property(Node)\n    initArea: Node = null\n\n    onLoad() {\n\n    }\n\n    createAllCardByDB(pokers: Poker[]) {\n        //先创建所有牌到init待发牌区\n        let index = 0\n        for (const poker of pokers) {\n            let uiPoker = this.createUIPoker(poker)\n            this.initArea.addChild(uiPoker.node)\n            uiPoker.node.setPosition(0.5 * index, 0.2 * index, 0)\n            index++\n        }\n    }\n\n    createUIPoker(poker: Poker): UIPoker {\n        const cardPrefab = instantiate(this.cardPrefab)\n        const uiPoker = cardPrefab.getComponent(UIPoker)\n        uiPoker.init(poker)\n        return uiPoker\n    }\n\n    //将牌移到close 收牌区\n    gamePlay() {\n        let stuck = []\n        for (let index = this.initArea.children.length - 1; index >= 0; --index) {\n            let children = this.initArea.children[index]\n            this.initArea.removeChild(children)\n            stuck.push(children)\n        }\n\n        for (let index = stuck.length - 1; index >= 0; --index) {\n            const card = stuck[index];\n            this.closeSendArea.addChild(card)\n        }\n    }\n\n    initPlayGroup(groupIndex: number, cardIndex: number, poker: Poker) {\n        let index = PLAY_AREA_COUNT * cardIndex - cardIndex * (cardIndex - 1) / 2 - cardIndex * groupIndex\n        let node = poker.UIPoker.node\n        let group = this.playGruopRoot[groupIndex]\n        let wolrdPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0))\n        let nodePos = this.playGruopRoot.getComponent(UITransform).convertToNodeSpaceAR(wolrdPos)\n        node.removeFromParent()\n        node.position = nodePos\n        this.playGruopRoot.addChild(node)\n        node.setSiblingIndex(index)\n\n        let delay = index * 0.2\n        let nodeEndPos = index * 92\n        if (poker.dir == ECardDir.OPEN) {\n            tween(node)\n                .delay(delay)\n                .to(0.8, { position: new Vec3(nodeEndPos, cardIndex * -30, 0) })\n                .to(0.5, { scale: new Vec3(0, 0, 0) })\n                .call(() => {\n\n                })\n                .to(0.5, { scale: new Vec3(1, 0, 0) })\n                .start()\n        } else {\n            tween(node)\n                .delay(delay)\n                .to(0.8, { position: new Vec3(nodeEndPos, cardIndex * -30, 0) })\n                .start()\n        }\n    }\n}\n\n"]}
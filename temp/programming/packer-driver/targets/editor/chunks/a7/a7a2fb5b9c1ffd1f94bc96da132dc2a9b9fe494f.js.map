{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Utils/Utils.ts"],"names":["TweenUtil","tween","Vec3","UITransform","flip","node","duration","onComplete","Promise","res","_tween","time","scale","getScale","skewY","x","parallel","to","easing","call","setScale","start","getSpPath","suit","count","letter","moveWorld2Space","targetNode","cleanUp","wolrdPos","getComponent","convertToWorldSpaceAR","nodePos","convertToNodeSpaceAR","removeFromParent","position","addChild"],"mappings":"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","sourcesContent":["import { tween, Node, Vec3, EPSILON, UITransform } from \"cc\";\n\n/*\n * @Description: \n * @Author: Super_Javan\n * @Date: 2022-12-02 15:07:23\n * @LastEditTime: 2022-12-02 16:54:24\n * @LastEditors: Super_Javan\n */\nexport default class TweenUtil {\n\n    /**\n     * 水平翻转（卡片翻转）\n     * @param node 节点\n     * @param duration 总时长\n     * @param onComplete 完成回调\n     */\n    public static flip(node: Node, duration: number, onComplete?: Function): Promise<void> {\n        return new Promise<void>(res => {\n            const _tween = tween,\n                time = duration / 2,\n                scale = node.getScale(),\n                skewY = scale.x > 0 ? 20 : -20;\n\n            _tween(node)\n                .parallel(\n                    _tween().to(time, { scale: new Vec3(0, 1, 1) }, { easing: 'quadIn' }),\n                    _tween().to(time, { skewY: -skewY }, { easing: 'quadOut' }),\n                )\n                .call(() => {\n                })\n                .parallel(\n                    _tween().to(time, { scale: new Vec3(-1, 1, 1) }, { easing: 'quadOut' }),\n                    _tween().to(time, { skewY: 0 }, { easing: 'quadIn' }),\n                )\n                .call(() => {\n                    node.setScale(1, 1, 1);\n                    onComplete && onComplete();\n                    res();\n                })\n                .start();\n        });\n    }\n\n}\n\n/**获取图片途径 */\nexport const getSpPath = (suit: string, count: number) => {\n    let letter: string = ''\n    switch (suit) {\n        case 'HongTao':\n            letter = 'd'\n            break;\n        case 'HeiTao':\n            letter = 'h'\n            break;\n        case 'MeiHua':\n            letter = 'b'\n            break;\n        case 'FangKuai':\n            letter = 'r'\n            break;\n    }\n\n    return `Texture/Cards/${suit}/${letter}${count}`\n}\n\nexport const moveWorld2Space = (node, targetNode, cleanUp: boolean = false) => {\n    let wolrdPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0))\n    // console.log('wolrdPos', wolrdPos)\n    let nodePos = targetNode.getComponent(UITransform).convertToNodeSpaceAR(wolrdPos)\n    node.removeFromParent(cleanUp)\n    node.position = nodePos\n    targetNode.addChild(node)\n}\n\n"]}
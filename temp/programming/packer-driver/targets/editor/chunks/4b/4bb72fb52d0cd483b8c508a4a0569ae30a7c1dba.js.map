{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/View/UIGameView.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","UITransform","tween","EventMgr","ECardDir","EventGame_Enum","GameDB","PLAY_AREA_COUNT","UIPoker","moveWorld2Space","ccclass","property","UIGameView","onLoad","getInstance","on","EVENT_PLAYAREA_TO_RECEIVE","clickCardHandler","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW","playPokerToReceive","createAllCardByDB","pokers","index","poker","uiPoker","createUIPoker","initArea","addChild","node","setPosition","cardPrefab","getComponent","init","gamePlay","stuck","children","length","removeChild","push","card","closeSendArea","initPlayGroup","groupIndex","cardIndex","i","console","log","convertToWorldSpaceAR","playGruopRoot","setSiblingIndex","delay","nodeEndPos","to","position","scale","call","dir","OPEN","refreshView","start","onCheckInPlayArea","onCheckIndexTop","isOpen","emit","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","receiveIndex","parent","removeFromParent","targetNode","receiveAreaList","restartGame","removeAllChildren","openSendArea","area","EVENT_RESTART_GAME"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, Game, instantiate, Vec3, UITransform, Tween, tween } from 'cc';\nimport EventMgr from '../Base/Event/EventMgr';\nimport { ECardDir, EventGame_Enum } from '../Enum';\nimport GameEngine from '../GameEngine';\nimport GameDB, { PLAY_AREA_COUNT } from '../Model/GameDB';\nimport Poker from '../Model/Poker';\nimport { UIPoker } from '../UI/UIPoker';\nimport TweenUtil, { moveWorld2Space } from '../Utils/Utils';\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIGameView')\nexport class UIGameView extends Component {\n    @property(Prefab)\n    cardPrefab: Prefab = null\n\n    @property(Node)\n    closeSendArea: Node = null\n    @property(Node)\n    openSendArea: Node = null\n    @property([Node])\n    receiveAreaList: Node[] = []\n    @property(Node)\n    playGruopRoot: Node = null\n    @property(Node)\n    initArea: Node = null\n\n    onLoad() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE, this.clickCardHandler, this)\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW, this.playPokerToReceive, this)\n    }\n\n    createAllCardByDB(pokers: Poker[]) {\n        //先创建所有牌到init待发牌区\n        let index = 0\n        for (const poker of pokers) {\n            let uiPoker = this.createUIPoker(poker)\n            this.initArea.addChild(uiPoker.node)\n            uiPoker.node.setPosition(0.5 * index, 0.2 * index, 0)\n            index++\n        }\n    }\n\n    createUIPoker(poker: Poker): UIPoker {\n        const cardPrefab = instantiate(this.cardPrefab)\n        const uiPoker = cardPrefab.getComponent(UIPoker)\n        uiPoker.init(poker)\n        return uiPoker\n    }\n\n    //将牌移到close 收牌区\n    gamePlay() {\n        let stuck = []\n        for (let index = this.initArea.children.length - 1; index >= 0; --index) {\n            let children = this.initArea.children[index]\n            this.initArea.removeChild(children)\n            stuck.push(children)\n        }\n\n        for (let index = stuck.length - 1; index >= 0; --index) {\n            const card = stuck[index];\n            this.closeSendArea.addChild(card)\n        }\n    }\n\n    async initPlayGroup(groupIndex: number, cardIndex: number, poker: Poker, i: number) {\n        let index = PLAY_AREA_COUNT * cardIndex - cardIndex * (cardIndex - 1) / 2 - cardIndex + groupIndex\n        // console.log('groupIndex:' + groupIndex + ',cardIndex:' + cardIndex + ',index:' + index)\n        let node = poker.UIPoker.node\n        // console.log('poker 点数:', poker.count, ',花色:', poker.suit)\n        console.log('poker worldPos', node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)))\n        moveWorld2Space(node, this.playGruopRoot)\n        node.setSiblingIndex(index)\n\n        let delay = index * 0.1\n        let nodeEndPos = groupIndex * 92\n\n        if (i == 0) {\n            tween(node)\n                .delay(delay)\n                .to(0.3, { position: new Vec3(nodeEndPos, cardIndex * -30, 0) })\n                .to(0.3, { scale: new Vec3(0, 1, 0) })\n                .call(() => {\n                    poker.dir = ECardDir.OPEN\n                    poker.UIPoker.refreshView()\n                })\n                .to(0.3, { scale: new Vec3(1, 1, 1) })\n                .start()\n        } else {\n            tween(node)\n                .delay(delay)\n                .to(0.3, { position: new Vec3(nodeEndPos, cardIndex * -30, 0) })\n                .start()\n        }\n    }\n\n    clickCardHandler(poker: Poker) {\n        //条件 1.在玩牌区 2.打开的 3.最上方的 4.点数是1\n        let uiPoker = poker.UIPoker\n\n        if (GameDB.getInstance().onCheckInPlayArea(poker)) {\n            console.log('在玩牌区1111')\n            if (GameDB.getInstance().onCheckIndexTop(poker)) {\n                console.log('在最上方2222')\n                if (uiPoker.isOpen()) {\n                    console.log('去改变数据层3333')\n                    EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, uiPoker.poker)\n                }\n            }\n        }\n    }\n\n    playPokerToReceive(poker: Poker) {\n        let receiveIndex: number = poker.parent.index\n        let node = poker.UIPoker.node\n        console.log('poker worldPos', node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0)))\n        node.removeFromParent()\n        let targetNode = this.receiveAreaList[receiveIndex]\n        moveWorld2Space(node, targetNode)\n\n        let delay = 0.5\n        tween(node)\n            .to(delay, { position: new Vec3(0, 0, 0) })\n            .start()\n    }\n\n    restartGame() {\n        this.closeSendArea.removeAllChildren()\n        this.openSendArea.removeAllChildren()\n\n        for (let index = 0; index < this.receiveAreaList.length; index++) {\n            const area = this.receiveAreaList[index];\n            area.removeAllChildren()\n        }\n\n        this.playGruopRoot.removeAllChildren()\n        this.initArea.removeAllChildren()\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_RESTART_GAME)\n    }\n}\n\n"]}
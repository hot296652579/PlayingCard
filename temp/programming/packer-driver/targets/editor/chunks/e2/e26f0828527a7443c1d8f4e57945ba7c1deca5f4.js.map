{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","ReceiveGroup","GameDB","EventMgr","ECardDir","EnumSuit","EventGame_Enum","Poker","index","_pokers","pokers","addPoker","poker","parent","push","removePoker","topPoker","groupTop","console","log","length","groupIsEmpty","suit","isNextPoker","count","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","getInstance","instance","constructor","cardTotal","cardSuits","_closePokers","_openPokers","_receiveArea","_playArea","initEvent","on","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB","onPlayToReceive","createCardsDB","i","j","HeiTao","HongTao","MeiHua","FangKuai","CLOSE","receiveGroup","emit","EVENT_GAME_INIT","gamePlay","shuffle","temp","EVENT_GAME_START","createPlayInitDB","shuffleTime","snd","parseInt","Math","random","rnd","dis","groupIndex","pokerGrop","EVENT_GAME_INIT_GROUP","group","EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW","onCheckInPlayArea","playArea","filter","pg","p","onCheckIndexTop","gp","closePokers","openPokers","receiveArea"],"mappings":"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","sourcesContent":["import EventMgr from \"../Base/Event/EventMgr\"\nimport { ECardDir, EnumSuit, ESuitNum, EventGame_Enum } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    public index: number = null\n    private _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n\n    public addPoker(poker: Poker) {\n        poker.parent = this\n        this._pokers.push(poker)\n    }\n\n    public removePoker(poker) {\n        let topPoker = this.groupTop\n        if (poker == topPoker) {\n            console.log('移除当前poker', poker)\n            this._pokers.length = this._pokers.length - 1\n            poker.parent = null\n\n            return poker\n        }\n    }\n\n    public groupIsEmpty() {\n        return this._pokers.length == 0\n    }\n\n    public get groupTop() {\n        return this.groupIsEmpty() ? null : this._pokers[this._pokers.length - 1]\n    }\n}\n\nclass ReceiveGroup extends PokerGrop {\n    public suit: EnumSuit = null\n\n    public isNextPoker(poker: Poker) {\n        console.log('this.suit:', this.suit)\n        console.log('poker.suit:', poker.suit)\n        if (this.suit === poker.suit) {\n            if (this.groupTop) {\n                return this.groupTop.count + 1 == poker.count\n            } else {\n                return poker.count == 1\n            }\n        }\n\n        return false\n    }\n}\n\nexport const RECEIVE_AREA_COUNT: number = 4\nexport const PLAY_AREA_COUNT: number = 7\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private _pokers: Poker[] = []\n\n    /** 发牌区数据*/\n    private _closePokers: Poker[] = []\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: ReceiveGroup[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    constructor() {\n        this.initEvent()\n    }\n\n    //绑定事件\n    initEvent() {\n        EventMgr.getInstance().on(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_DB, this.onPlayToReceive, this)\n    }\n\n    //创建初始数据\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit, ECardDir.CLOSE)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new ReceiveGroup()\n            receiveGroup.index = this._receiveArea.length\n            receiveGroup.suit = EnumSuit[index]\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            receiveGroup.index = this._playArea.length\n            this._playArea.push(receiveGroup)\n        }\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT, this._pokers)\n    }\n\n    gamePlay() {\n        this.shuffle(this._pokers, 200)\n        let temp = this._pokers\n        this._closePokers = this.pokers\n        this._pokers = temp\n\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_START)\n\n        this.createPlayInitDB()\n    }\n    /**洗牌 */\n    shuffle(pokers: Poker[], shuffleTime: number = 100) {\n        for (let index = 0; index < shuffleTime; index++) {\n            // let snd = Math.floor(Math.random() * pokers.length - 1)\n            // let rnd = Math.floor(Math.random() * pokers.length - 1)\n            let snd = parseInt('' + Math.random() * pokers.length, 10)\n            let rnd = parseInt('' + Math.random() * pokers.length, 10)\n\n            let temp = pokers[snd]\n            pokers[snd] = pokers[rnd]\n            pokers[rnd] = temp\n        }\n    }\n    createPlayInitDB() {\n        for (let count = PLAY_AREA_COUNT; count >= 1; count--) {\n            for (let i = 0; i < count; i++) {\n                let dis = PLAY_AREA_COUNT - count\n                let groupIndex = dis + i\n                let pokerGrop = this._playArea[groupIndex]\n                let poker = this._closePokers[this._closePokers.length - 1]\n                this._closePokers.length = this._closePokers.length - 1\n                // poker.dir = i == 0 ? poker.dir = ECardDir.OPEN : poker.dir = ECardDir.CLOSE\n                pokerGrop.addPoker(poker)\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_GAME_INIT_GROUP, groupIndex, dis, poker, i)\n            }\n        }\n    }\n\n    onPlayToReceive(poker: Poker) {\n        for (let index = 0; index < RECEIVE_AREA_COUNT; index++) {\n            let group: ReceiveGroup = this._receiveArea[index]\n            if (group.isNextPoker(poker)) {\n                let parent: PokerGrop = poker.parent\n                parent.removePoker(poker)\n                group.addPoker(poker)\n                console.log('去刷新收牌组显示数据view...')\n                EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE_UPDATE_VIEW, poker)\n            } else {\n\n            }\n        }\n    }\n\n    //检测这张牌是否在play area\n    onCheckInPlayArea(poker: Poker): boolean {\n        return this.playArea.filter(\n            pg => pg.pokers.filter(p => p.count == poker.count && p.suit == poker.suit).length > 0\n        ).length > 0\n    }\n\n    //检测是否在顶部\n    onCheckIndexTop(poker: Poker) {\n        for (const gp of this._playArea) {\n            let pokers = gp.pokers\n            let topPoker = pokers[pokers.length - 1]\n            if (topPoker.count == poker.count && topPoker.suit == poker.suit)\n                return true\n        }\n\n        return false\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closePokers(): Poker[] { return this._closePokers }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PokerGrop[] { return this._playArea }\n    public get receiveArea(): ReceiveGroup[] { return this._receiveArea }\n}\n"]}
{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/Model/GameDB.ts"],"names":["PokerGrop","GameDB","EnumSuit","Poker","_pokers","pokers","cardTotal","cardSuits","RECEIVE_AREA_COUNT","PLAY_AREA_COUNT","_closePokers","_openPokers","_receiveArea","_playArea","getInstance","instance","createCardsDB","i","j","suit","HeiTao","HongTao","MeiHua","FangKuai","poker","push","index","receiveGroup","closePokers","openPokers","playArea","receiveArea"],"mappings":";;;+CAGaA,S,EAOQC,M;;;;;;;;;;;;;;;;;;;;;AAVZC,MAAAA,Q,iBAAAA,Q;;AACFC,MAAAA,K;;;;;;;2BAEMH,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eACXI,OADW,GACQ,EADR;AAAA;;AAEF,YAANC,MAAM,GAAY;AACzB,iBAAO,KAAKD,OAAZ;AACH;;AAJkB,O;;yBAOFH,M,GAAN,MAAMA,MAAN,CAAa;AAAA;AAAA,eASPK,SATO,GASa,EATb;AAAA,eAUPC,SAVO,GAUa,CAVb;AAAA,eAYPC,kBAZO,GAYsB,CAZtB;AAAA,eAaPC,eAbO,GAamB,CAbnB;AAAA,eAchBL,OAdgB,GAcG,EAdH;AAAA,eAiBhBM,YAjBgB,GAiBQ,EAjBR;AAAA,eAmBhBC,WAnBgB,GAmBO,EAnBP;AAAA,eAqBhBC,YArBgB,GAqBY,EArBZ;AAAA,eAuBhBC,SAvBgB,GAuBS,EAvBT;AAAA;;AAEN,eAAXC,WAAW,GAAG;AACjB,cAAI,KAAKC,QAAL,IAAiB,IAArB,EAA2B;AACvB,iBAAKA,QAAL,GAAgB,IAAId,MAAJ,EAAhB;AACH;;AACD,iBAAO,KAAKc,QAAZ;AACH;;AAkBDC,QAAAA,aAAa,GAAG;AACZ,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKX,SAA1B,EAAqCW,CAAC,EAAtC,EAA0C;AACtC,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,SAAzB,EAAoCW,CAAC,EAArC,EAAyC;AACrC,kBAAIC,IAAc,GAAG;AAAA;AAAA,wCAASC,MAA9B;;AACA,sBAAQF,CAAR;AACI,qBAAK,CAAL;AACIC,kBAAAA,IAAI,GAAG;AAAA;AAAA,4CAASE,OAAhB;AACA;;AACJ,qBAAK,CAAL;AACIF,kBAAAA,IAAI,GAAG;AAAA;AAAA,4CAASG,MAAhB;AACA;;AACJ,qBAAK,CAAL;AACIH,kBAAAA,IAAI,GAAG;AAAA;AAAA,4CAASI,QAAhB;AACA;;AAEJ;AACIJ,kBAAAA,IAAI,GAAG;AAAA;AAAA,4CAASC,MAAhB;AACA;AAbR;;AAgBA,kBAAII,KAAK,GAAG;AAAA;AAAA,kCAAUP,CAAV,EAAaE,IAAb,CAAZ;;AACA,mBAAKf,OAAL,CAAaqB,IAAb,CAAkBD,KAAlB;AACH;AACJ;;AAED,eAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKlB,kBAAjC,EAAqDkB,KAAK,EAA1D,EAA8D;AAC1D,gBAAIC,YAAY,GAAG,IAAI3B,SAAJ,EAAnB;;AACA,iBAAKY,YAAL,CAAkBa,IAAlB,CAAuBE,YAAvB;AACH;;AAED,eAAK,IAAID,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKjB,eAAjC,EAAkDiB,KAAK,EAAvD,EAA2D;AACvD,gBAAIC,YAAY,GAAG,IAAI3B,SAAJ,EAAnB;;AACA,iBAAKa,SAAL,CAAeY,IAAf,CAAoBE,YAApB;AACH;AACJ;;AAEgB,YAANtB,MAAM,GAAY;AAAE,iBAAO,KAAKD,OAAZ;AAAqB;;AAC9B,YAAXwB,WAAW,GAAY;AAAE,iBAAO,KAAKlB,YAAZ;AAA0B;;AACzC,YAAVmB,UAAU,GAAY;AAAE,iBAAO,KAAKlB,WAAZ;AAAyB;;AACzC,YAARmB,QAAQ,GAAgB;AAAE,iBAAO,KAAKjB,SAAZ;AAAuB;;AACtC,YAAXkB,WAAW,GAAgB;AAAE,iBAAO,KAAKnB,YAAZ;AAA0B;;AAjE1C,O;;AAAPX,MAAAA,M,CACFc,Q,GAAgB,I","sourcesContent":["import { EnumSuit } from \"../Enum\"\nimport Poker from \"./Poker\"\n\nexport class PokerGrop {\n    private _pokers: Poker[] = []\n    public get pokers(): Poker[] {\n        return this._pokers\n    }\n}\n\nexport default class GameDB {\n    private static instance: any = null\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new GameDB()\n        }\n        return this.instance\n    }\n\n    private readonly cardTotal: number = 13\n    private readonly cardSuits: number = 4\n\n    private readonly RECEIVE_AREA_COUNT: number = 4\n    private readonly PLAY_AREA_COUNT: number = 7\n    private _pokers: Poker[] = []\n\n    /** 发牌区数据*/\n    private _closePokers: Poker[] = []\n    /** 开牌区数据*/\n    private _openPokers: Poker[] = []\n    /** 收牌区数据*/\n    private _receiveArea: PokerGrop[] = []\n    /** 玩牌区数据*/\n    private _playArea: PokerGrop[] = []\n\n    createCardsDB() {\n        for (let i = 1; i <= this.cardTotal; i++) {\n            for (let j = 0; j < this.cardSuits; j++) {\n                let suit: EnumSuit = EnumSuit.HeiTao\n                switch (j) {\n                    case 1:\n                        suit = EnumSuit.HongTao\n                        break;\n                    case 2:\n                        suit = EnumSuit.MeiHua\n                        break;\n                    case 3:\n                        suit = EnumSuit.FangKuai\n                        break;\n\n                    default:\n                        suit = EnumSuit.HeiTao\n                        break;\n                }\n\n                let poker = new Poker(i, suit)\n                this._pokers.push(poker)\n            }\n        }\n\n        for (let index = 0; index < this.RECEIVE_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._receiveArea.push(receiveGroup)\n        }\n\n        for (let index = 0; index < this.PLAY_AREA_COUNT; index++) {\n            let receiveGroup = new PokerGrop()\n            this._playArea.push(receiveGroup)\n        }\n    }\n\n    public get pokers(): Poker[] { return this._pokers }\n    public get closePokers(): Poker[] { return this._closePokers }\n    public get openPokers(): Poker[] { return this._openPokers }\n    public get playArea(): PokerGrop[] { return this._playArea }\n    public get receiveArea(): PokerGrop[] { return this._receiveArea }\n}\n"]}
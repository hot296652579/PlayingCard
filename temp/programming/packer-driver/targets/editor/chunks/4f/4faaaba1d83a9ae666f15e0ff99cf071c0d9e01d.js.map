{"version":3,"sources":["file:///Users/super_javan/cocoscreator/PlayCard/assets/Script/UI/UIPoker.ts"],"names":["_decorator","Component","Node","Sprite","NodeEventType","EventMgr","ECardDir","EventGame_Enum","ResMgr","getSpPath","ccclass","property","UIPoker","cardSpFrame","_poker","poker","start","node","getComponent","initEvent","on","TOUCH_START","touchStart","TOUCH_MOVE","touchMove","TOUCH_END","touchEnd","init","bindView","spPath","suit","count","schedule","cardSpriteFrame","getInstance","loadResSpriteFrame","spriteFrame","updateCardDir","error","console","log","dir","CLOSE","cardBgNode","active","refreshView","event","emit","EVENT_PLAYAREA_TO_RECEIVE","isOpen","OPEN","countIsOne"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAmBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,a,OAAAA,a;;AACpDC,MAAAA,Q;;AACEC,MAAAA,Q,iBAAAA,Q;AAAUC,MAAAA,c,iBAAAA,c;;AAEZC,MAAAA,M;;AACEC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;yBAGjBY,O,WADZF,OAAO,CAAC,SAAD,C,UAEHC,QAAQ,CAACT,IAAD,C,2BAFb,MACaU,OADb,SAC6BX,SAD7B,CACuC;AAAA;AAAA;;AAAA;;AAAA,eAInCY,WAJmC,GAIb,IAJa;AAAA,eAK3BC,MAL2B;AAAA;;AAMnB,YAALC,KAAK,GAAG;AACf,iBAAO,KAAKD,MAAZ;AACH;;AAEDE,QAAAA,KAAK,GAAG;AACJ,eAAKH,WAAL,GAAmB,KAAKI,IAAL,CAAUC,YAAV,CAAuBf,MAAvB,CAAnB;AAEA,eAAKgB,SAAL;AACH;;AAEDA,QAAAA,SAAS,GAAG;AACR,eAAKF,IAAL,CAAUG,EAAV,CAAahB,aAAa,CAACiB,WAA3B,EAAwC,KAAKC,UAA7C,EAAyD,IAAzD,EADQ,CACyD;;AACjE,eAAKL,IAAL,CAAUG,EAAV,CAAahB,aAAa,CAACmB,UAA3B,EAAuC,KAAKC,SAA5C,EAAuD,IAAvD;AACA,eAAKP,IAAL,CAAUG,EAAV,CAAahB,aAAa,CAACqB,SAA3B,EAAsC,KAAKC,QAA3C,EAAqD,IAArD;AACH;;AAEDC,QAAAA,IAAI,CAACZ,KAAD,EAAe;AACf,cAAI,CAACA,KAAL,EAAY;AACZ,eAAKD,MAAL,GAAcC,KAAd;AACAA,UAAAA,KAAK,CAACa,QAAN,CAAe,IAAf;AAEA,gBAAMC,MAAM,GAAG;AAAA;AAAA,sCAAUd,KAAK,CAACe,IAAhB,EAAsBf,KAAK,CAACgB,KAA5B,IAAqC,cAApD,CALe,CAMf;;AACA,cAAI;AACA,iBAAKC,QAAL,CAAc,YAAY;AACtB,oBAAMC,eAAe,GAAG,MAAM;AAAA;AAAA,oCAAOC,WAAP,GAAqBC,kBAArB,CAAwCN,MAAxC,CAA9B;AACA,mBAAKhB,WAAL,CAAiBuB,WAAjB,GAA+BH,eAA/B;AAEA,mBAAKI,aAAL,CAAmBtB,KAAnB;AACH,aALD,EAKG,GALH;AAOH,WARD,CAQE,OAAOuB,KAAP,EAAc;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BX,MAA9B;AACH;AACJ;;AAEDQ,QAAAA,aAAa,CAAC;AAAEI,UAAAA;AAAF,SAAD,EAAU;AACnB,cAAIA,GAAG,IAAI;AAAA;AAAA,oCAASC,KAApB,EAA2B;AACvB,iBAAKC,UAAL,CAAgBC,MAAhB,GAAyB,IAAzB;AACH,WAFD,MAEO;AACH,iBAAKD,UAAL,CAAgBC,MAAhB,GAAyB,KAAzB;AACH;AACJ;;AAEDC,QAAAA,WAAW,GAAG;AACV,eAAKR,aAAL,CAAmB,KAAKvB,MAAxB;AACH;;AAEDQ,QAAAA,UAAU,CAACwB,KAAD,EAAQ,CACd;AACH;;AAEDtB,QAAAA,SAAS,GAAG,CAEX;;AAEDE,QAAAA,QAAQ,GAAG;AACP;AAAA;AAAA,oCAASQ,WAAT,GAAuBa,IAAvB,CAA4B;AAAA;AAAA,gDAAeC,yBAA3C,EAAsE,KAAKlC,MAA3E;AACH;;AAEMmC,QAAAA,MAAM,GAAY;AACrB,iBAAO,KAAKnC,MAAL,CAAY2B,GAAZ,IAAmB;AAAA;AAAA,oCAASS,IAAnC;AACH;;AAEMC,QAAAA,UAAU,GAAY;AACzB,iBAAO,KAAKrC,MAAL,CAAYiB,KAAZ,IAAqB,CAA5B;AACH;;AAxEkC,O;;;;;iBAEhB,I","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, Sprite, NodeEventType, path } from 'cc';\nimport EventMgr from '../Base/Event/EventMgr';\nimport { ECardDir, EventGame_Enum } from '../Enum';\nimport Poker from '../Model/Poker';\nimport ResMgr from '../ResMgr';\nimport { getSpPath } from '../Utils/Utils';\nconst { ccclass, property } = _decorator;\n\n@ccclass('UIPoker')\nexport class UIPoker extends Component {\n    @property(Node)\n    cardBgNode: Node = null\n\n    cardSpFrame: Sprite = null\n    private _poker: Poker\n    public get poker() {\n        return this._poker\n    }\n\n    start() {\n        this.cardSpFrame = this.node.getComponent(Sprite)\n\n        this.initEvent()\n    }\n\n    initEvent() {\n        this.node.on(NodeEventType.TOUCH_START, this.touchStart, this);  // if \"this\" is component and the \"memberFunction\" declared in CCClass.\n        this.node.on(NodeEventType.TOUCH_MOVE, this.touchMove, this);\n        this.node.on(NodeEventType.TOUCH_END, this.touchEnd, this);\n    }\n\n    init(poker: Poker) {\n        if (!poker) return\n        this._poker = poker\n        poker.bindView(this)\n\n        const spPath = getSpPath(poker.suit, poker.count) + '/spriteFrame'\n        // console.log('spPath', spPath)\n        try {\n            this.schedule(async () => {\n                const cardSpriteFrame = await ResMgr.getInstance().loadResSpriteFrame(spPath)\n                this.cardSpFrame.spriteFrame = cardSpriteFrame\n\n                this.updateCardDir(poker)\n            }, 0.1)\n\n        } catch (error) {\n            console.log('加载图片出错 spPath:', spPath)\n        }\n    }\n\n    updateCardDir({ dir }) {\n        if (dir == ECardDir.CLOSE) {\n            this.cardBgNode.active = true\n        } else {\n            this.cardBgNode.active = false\n        }\n    }\n\n    refreshView() {\n        this.updateCardDir(this._poker)\n    }\n\n    touchStart(event) {\n        // console.log('event.target,', event.target)\n    }\n\n    touchMove() {\n\n    }\n\n    touchEnd() {\n        EventMgr.getInstance().emit(EventGame_Enum.EVENT_PLAYAREA_TO_RECEIVE, this._poker)\n    }\n\n    public isOpen(): boolean {\n        return this._poker.dir == ECardDir.OPEN\n    }\n\n    public countIsOne(): boolean {\n        return this._poker.count == 1\n    }\n}\n\n"]}